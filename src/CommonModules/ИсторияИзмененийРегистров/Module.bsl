
&НаСервере
Процедура ВывестиТаблицу(ТабДок, Таблица, АвтоопределениеШирины = Истина, МинШирина = 10) Экспорт 
	
	ШиринаКолонок = Новый Массив;
	
	Макет = Новый ТабличныйДокумент;
	Область = Макет.Область("R1:R2");
	Область.СоздатьФорматСтрок();
	
	Для Счетчик = 1 По Таблица.Колонки.Количество() Цикл
		
		Колонка = Таблица.Колонки[Счетчик - 1];
		
		ОбластьШапка = Макет.Область(1, Счетчик);
		ОбластьШапка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		ОбластьШапка.Текст      = Колонка.Имя;
		ОбластьШапка.ЦветФона   = ЦветаСтиля.ЦветФонаШапкиОтчета;
		ОбластьШапка.ЦветРамки  = ЦветаСтиля.ЦветЛинииОтчета;
		
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		ОбластьШапка.Обвести(Линия, Линия, Линия, Линия);
		
		ОбластьСтрока = Макет.Область(2, Счетчик);
		ОбластьСтрока.Заполнение  = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		ОбластьСтрока.Параметр    = Колонка.Имя;
		ОбластьСтрока.ПараметрРасшифровки = Колонка.Имя;
		ОбластьСтрока.ЦветРамки   = ЦветаСтиля.ЦветЛинииОтчета;
		ОбластьСтрока.Обвести(Линия, Линия, Линия, Линия);
		
		Область =  Макет.Область(1, Счетчик, 2, Счетчик);
		Область.ШиринаКолонки = Макс(МинШирина, СтрДлина(Колонка.Имя));
		
		ШиринаКолонок.Добавить(Область.ШиринаКолонки);
		
	КонецЦикла;	
	
	Область = Макет.ПолучитьОбласть("R1");
	ТабДок.Вывести(Область);
	
	ПерваяСтрока = ТабДок.ВысотаТаблицы;
	ТабДок.НачатьГруппуСтрок("Таблица");
	
	Область = Макет.ПолучитьОбласть("R2");
	Для каждого СтрокаТЗ из Таблица Цикл
		
		Область.Параметры.Заполнить(СтрокаТЗ);
		ТабДок.Вывести(Область);
		
		Если АвтоопределениеШирины Тогда
			
			Для Счетчик = 0 По ШиринаКолонок.Количество() - 1 Цикл
				
				Колонка  = Таблица.Колонки[Счетчик];
				Значение = СтрокаТЗ[Колонка.Имя];
				Ширина   = СтрДлина(СокрЛП(Значение));
				
				Если Ширина > ШиринаКолонок[Счетчик] Тогда
					ШиринаКолонок[Счетчик] = Ширина;	
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	ПоследняяСтрока = ТабДок.ВысотаТаблицы;
	ТабДок.ЗакончитьГруппуСтрок();
	
	Если АвтоопределениеШирины Тогда
		
		Для Счетчик = 1 По ШиринаКолонок.Количество() Цикл
			
			Область = ТабДок.Область(ПерваяСтрока, Счетчик, ПоследняяСтрока, Счетчик);
			Область.ШиринаКолонки = ШиринаКолонок[Счетчик - 1] * 0.85;
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры         

&НаСервере
Процедура ЗаписатьИсториюРегистраСведений(ТекущийОбъект, МетаданныеРегистра) Экспорт  
	Если ТекущийОбъект <> Неопределено Тогда
		
		НаборЗаписей = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
	    НоваяЗапись = НаборЗаписей.Добавить();

		// Обработка измерений
	    ИзмеренияРегистра = МетаданныеРегистра.Измерения;
	    Для Каждого Измерение Из ИзмеренияРегистра Цикл
	        ИмяИзмерения = Измерение.Имя;
	        Если ТипЗнч(ТекущийОбъект[ИмяИзмерения]) <> Тип("Неопределено") Тогда
	            НоваяЗапись[ИмяИзмерения] = ТекущийОбъект[ИмяИзмерения];
	        КонецЕсли;                                   
	    КонецЦикла;
	    
	    // Обработка реквизитов
	    РеквизитыРегистра = МетаданныеРегистра.Реквизиты;
	    Для Каждого Реквизит Из РеквизитыРегистра Цикл
	        ИмяРеквизита = Реквизит.Имя;
	        Если ТипЗнч(ТекущийОбъект[ИмяРеквизита]) <> Тип("Неопределено") Тогда
	            НоваяЗапись[ИмяРеквизита] = ТекущийОбъект[ИмяРеквизита];
	        КонецЕсли;
		КонецЦикла; 
		
		// Обработка ресурсов
	    РесурсыРегистра = МетаданныеРегистра.Ресурсы;
	    Для Каждого Ресурс Из РесурсыРегистра Цикл
	        ИмяРесурс = Ресурс.Имя;
	        Если ТипЗнч(ТекущийОбъект[ИмяРесурс]) <> Тип("Неопределено") Тогда
	            НоваяЗапись[ИмяРесурс] = ТекущийОбъект[ИмяРесурс];
	        КонецЕсли;
		КонецЦикла;
		
		
		Если МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда 
			НоваяЗапись.Период = ТекущийОбъект.Период; 
		КонецЕсли;
		
		ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь(); 
		
		Настройки = Новый НастройкиИсторииДанных;
		Настройки.Использование = Истина; 

		////Включение истории для регистра    /Не работает
		//#TODO: РегистрСПараметрамиВозможно {		
		//Для Каждого ИспользуемоеПоле Из МассивИспользуемыхПолейВИСтории Цикл 
		//	Настройки.ИспользованиеПолей.Вставить(ИспользуемоеПоле, Истина);
		//КонецЦикла;                                                
		//}#TODO      		
		
		ИсторияДанных.УстановитьНастройки(МетаданныеРегистра, Настройки);           
		                                                          
		//Запись 
		ИсторияДанных.ЗаписатьВерсию(   НаборЗаписей,
										ТекущаяДатаСеанса(), 
										ТекущийПользователь.УникальныйИдентификатор, 
										ТекущийПользователь.Имя, 
										ТекущийПользователь.ПолноеИмя,           
										ВидИзмененияДанных.Изменение ); 
										
		//Выключение истории для регистра		
		Настройки = Новый НастройкиИсторииДанных;
		Настройки.Использование = Ложь;
		ИсторияДанных.УстановитьНастройки(МетаданныеРегистра, Настройки);
	КонецЕсли;
КонецПроцедуры          

&НаСервере
Функция ПолучитьИсториюИзмененийОбъекта(ИсходныйКлючЗаписи, МассивИспользуемыхПолейВИСтории = Неопределено) Экспорт	
	МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗнч(ИсходныйКлючЗаписи));
	
	Если МассивИспользуемыхПолейВИСтории = Неопределено Тогда 
		МассивИспользуемыхПолейВИСтории = ПолучитьВсеПоляРегистраВМассив(МетаданныеРегистра);
	КонецЕсли;
	
	Отбор = Новый Структура;     
	Отбор.Вставить("Метаданные", МетаданныеРегистра);
	Отбор.Вставить("Данные", ИсходныйКлючЗаписи);

	ТабВерсий = ИсторияДанных.ВыбратьВерсии(Отбор); 
	ТаблицаСДаннымиОВерсиях = Новый ТаблицаЗначений();
	
	ТаблицаСДаннымиОВерсиях.Колонки.Добавить("НомерВерсии");
	ТаблицаСДаннымиОВерсиях.Колонки.Добавить("Дата");
	ТаблицаСДаннымиОВерсиях.Колонки.Добавить("Пользователь");
	ТаблицаСДаннымиОВерсиях.Колонки.Добавить("ИмяПользователя");
	ТаблицаСДаннымиОВерсиях.Колонки.Добавить("ПолноеИмяПользователя");
	
	Для Каждого ИспользуемоеПоле Из МассивИспользуемыхПолейВИСтории Цикл 
		ТаблицаСДаннымиОВерсиях.Колонки.Добавить(ИспользуемоеПоле);
	КонецЦикла;
	
	Для Каждого Версия Из ТабВерсий Цикл    
		ВерсияОбъекта = ИсторияДанных.СформироватьПоВерсии(ИсходныйКлючЗаписи, Версия.НомерВерсии);
		Если ВерсияОбъекта <> Неопределено Тогда
			СтруктураИстории = ТаблицаСДаннымиОВерсиях.Добавить();
			ЗаполнитьЗначенияСвойств(СтруктураИстории, Версия);
			Для Каждого ИспользуемоеПоле Из МассивИспользуемыхПолейВИСтории Цикл 
				СтруктураИстории[ИспользуемоеПоле] = ВерсияОбъекта[0][ИспользуемоеПоле];
			КонецЦикла;
		КонецЕсли;                                                         
	КонецЦикла;	
 
	Таб = Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет("ИсторияИзмененийРегистра");
	ИсторияИзмененийРегистров.ВывестиТаблицу(Таб, ТаблицаСДаннымиОВерсиях);
	Таб.ТолькоПросмотр = Истина;           
                                                            
	Возврат Таб;                
КонецФункции 

&НаСервере
Функция ПолучитьПоследнююВерсиюРегистраСведений(ИсходныйКлючЗаписи) Экспорт
	МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗнч(ИсходныйКлючЗаписи));
	
	Отбор = Новый Структура;     
	Отбор.Вставить("Метаданные", МетаданныеРегистра);
	Отбор.Вставить("Данные", ИсходныйКлючЗаписи);

	ТабВерсий = ИсторияДанных.ВыбратьВерсии(Отбор);
	Попытка
		Возврат ИсторияДанных.СформироватьПоВерсии(ИсходныйКлючЗаписи, ТабВерсий[0].НомерВерсии)[0];	
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

&НаСервере
Функция ПолучитьВсеПоляРегистраВМассив(МетаданныеРегистра)
	МассивПолей = Новый Массив;
	// Обработка измерений
    ИзмеренияРегистра = МетаданныеРегистра.Измерения;
    Для Каждого Измерение Из ИзмеренияРегистра Цикл
		МассивПолей.Добавить(Измерение.Имя);                                  
    КонецЦикла;
    
    // Обработка реквизитов
    РеквизитыРегистра = МетаданныеРегистра.Реквизиты;
    Для Каждого Реквизит Из РеквизитыРегистра Цикл
		МассивПолей.Добавить(Реквизит.Имя);
	КонецЦикла; 
	
	// Обработка ресурсов
    РесурсыРегистра = МетаданныеРегистра.Ресурсы;
	Для Каждого Ресурс Из РесурсыРегистра Цикл
		МассивПолей.Добавить(Ресурс.Имя);
	КонецЦикла;                                                             
	
   	Если МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда 
		 МассивПолей.Добавить("Период"); 
	КонецЕсли; 
	
	Возврат МассивПолей;
КонецФункции 

&НаСервере
Функция ПолучитьПараметрыИсходнойФормыИсторииДанных(КлючЗаписи) Экспорт 
    ПараметрыФормы = Новый Структура("Данные", КлючЗаписи); 
    Возврат ПараметрыФормы; 
 КонецФункции   